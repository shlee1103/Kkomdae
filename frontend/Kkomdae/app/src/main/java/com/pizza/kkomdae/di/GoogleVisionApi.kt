package com.pizza.kkomdae.di

import android.content.Context
import android.util.Log
import com.pizza.kkomdae.BuildConfig

import com.pizza.kkomdae.base.ApplicationClass
import okhttp3.Call
import okhttp3.Callback
import okhttp3.MediaType
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okhttp3.Response
import org.json.JSONArray
import org.json.JSONObject
import java.io.IOException

// üîê Google Cloud Vision API ÌÇ§ (ÎÖ∏Ï∂ú Ï£ºÏùò!)
private val VISION_API_URL = "https://vision.googleapis.com/v1/images:annotate?key=${BuildConfig.VISION_API_KEY}"

object GoogleVisionApi {
    // Vision API Ìò∏Ï∂ú Ìï®Ïàò
    fun callOcr(context: Context, base64Image: String, callback: (serial: String, barcode: String) -> Unit) {
        val jsonRequest = JSONObject().apply {
            put("requests", JSONArray().put(
                JSONObject().apply {
                    put("image", JSONObject().put("content", base64Image))
                    put(
                        "features", JSONArray().put(
                            JSONObject().put("type", "TEXT_DETECTION")
                        )
                    )
                }
            ))
        }

        val requestBody = RequestBody.create(
            "application/json".toMediaType(),
            jsonRequest.toString()
        )

        val request = Request.Builder()
            .url(VISION_API_URL)
            .post(requestBody)
            .build()

        val client = ApplicationClass.retrofit.callFactory() as OkHttpClient

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                Log.e("VisionAPI", "API Ìò∏Ï∂ú Ïã§Ìå®: ${e.message}")
            }

            override fun onResponse(call: Call, response: Response) {
                val responseBody = response.body?.string()
                val fullText = try {
                    JSONObject(responseBody)
                        .getJSONArray("responses")
                        .getJSONObject(0)
                        .optJSONObject("fullTextAnnotation")
                        ?.getString("text") ?: ""
                } catch (e: Exception) {
                    Log.e("VisionAPI", "ÌååÏã± Ïò§Î•ò: $responseBody")
                    ""
                }

                // üîç Ïó¨Í∏∞ÏÑú fullText Î°úÍ∑∏ Ï∞çÍ∏∞!
                Log.d("VisionAPI", "Ïù∏ÏãùÎêú Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏:\n$fullText")

                val lines = fullText.split("\n")
                var serial = ""
                var barcode = ""

                for (i in lines.indices) {
                    val line = lines[i].trim()

                    // S/N Îã§Ïùå Ï§ÑÏù¥ ÏãúÎ¶¨ÏñºÏùº Í∞ÄÎä•ÏÑ±
                    if (line.contains("S/N") && i + 1 < lines.size) {
                        serial = lines[i + 1].trim()
                    }

                    // Î∞îÏΩîÎìú Ìå®ÌÑ¥: AÎ°ú ÏãúÏûëÌï¥ÏÑú Ïà´Ïûê 8~13Í∞ú, AÎ°ú ÎÅùÎÇ† ÏàòÎèÑ ÏûàÏùå (Í≥µÎ∞± Ï†úÍ±∞ ÌõÑ ÎπÑÍµê)
                    val cleaned = line.replace(" ", "")
                    if (Regex("A\\d{8,13}A?").matches(cleaned)) {
                        barcode = cleaned
                    }
                }



                (context as? android.app.Activity)?.runOnUiThread {
                    callback(serial, barcode)
                }
            }
        })
    }
}