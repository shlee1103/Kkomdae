package com.pizza.kkomdae.ui.step1

import android.app.Dialog
import android.content.Context
import android.content.pm.ActivityInfo
import android.graphics.Bitmap
import android.graphics.Color
import android.graphics.ImageDecoder
import android.graphics.drawable.ColorDrawable
import android.graphics.drawable.Drawable
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.view.View
import android.view.ViewGroup
import android.view.Window
import android.widget.Button
import android.widget.TextView
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.ViewModelProvider
import com.bumptech.glide.Glide
import com.bumptech.glide.request.target.CustomTarget
import com.bumptech.glide.request.transition.Transition
import com.pizza.kkomdae.CameraActivity
import com.pizza.kkomdae.R
import com.pizza.kkomdae.base.BaseFragment
import com.pizza.kkomdae.databinding.FragmentFontResultBinding
import com.pizza.kkomdae.presenter.viewmodel.CameraViewModel
import com.pizza.kkomdae.ui.guide.Step1GuideFragment

private const val TAG = "ResultFragment"
private const val ARG_PARAM1 = "param1"
private const val ARG_PARAM2 = "param2"
private lateinit var cameraActivity: CameraActivity

private var stopCameraDialog: Dialog? = null

class ResultFragment : BaseFragment<FragmentFontResultBinding>(
    FragmentFontResultBinding::bind,
    R.layout.fragment_font_result
){

    // Î∑∞Î™®Îç∏
    private val viewModel: CameraViewModel by activityViewModels()

    private var param1: String? = null
    private var param2: String? = null


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)



        var url :Uri? = null
        // uri ÏÑ§Ï†ï
        url = uri(url)

        // Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
        initImage(url)

        // Î≤ÑÌäº ÏÑ§Ï†ï
        settingButton()

        // ÏòµÏ†∏Î≤Ñ ÏÑ§Ï†ï
        observe()
    }

    private fun settingButton() {
        // Ïû¨Ï¥¨ÏòÅ Î≤ÑÌäº ÎàåÎ†ÄÏùÑ Îïå
        clickRePhotoBtn()

        // Ï≤¥ÌÅ¨ Î≤ÑÌäº ÎàåÎ†ÄÏùÑ Îïå
        clickCheckBtn()

        // X Î≤ÑÌäº ÎàåÎ†ÄÏùÑ Îïå
        clickCloseBtn()
    }

    private fun observe() {
        // ÌÜµÏã† Í≤∞Í≥º
        postResultObserve()

        //ÌÜµÏã† Ïã§Ìå®Ïãú
        failResultObserve()

        // Ïû¨Ï¥¨ÏòÅ url
        rePhotoObserve()
    }

    private fun rePhotoObserve() {
        viewModel.reCameraUri.observe(viewLifecycleOwner) {
            it ?: return@observe
            cameraActivity.moveToBackReCamera(it)
        }
    }

    private fun failResultObserve() {
        viewModel.failResult.observe(viewLifecycleOwner) {
            it ?: return@observe
            Log.d(TAG, "onViewCreated: $it")
            showNetworkErrorDialog()
            viewModel.clearFail()
            Log.d(TAG, "onViewCreated: $it")
        }
    }

    private fun postResultObserve() {
        viewModel.postResult.observe(viewLifecycleOwner) {
            it ?: return@observe
            if (it?.success == true) {
                // ÏÑúÎ≤ÑÏóê ÏÇ¨ÏßÑ Ï†ÑÏÜ° ÏÑ±Í≥µÏãúÏóêÎßå ÌîÑÎ°†Ìä∏Ïóê Îã®Í≥Ñ Ï†ÄÏû•
                viewModel.confirmPhoto(viewModel.step.value ?: 0)
                // Îã§Ïùå Îã®Í≥ÑÎ°ú Ïù¥Îèô
                Log.d("imageBug", "postResultStep: ${viewModel.step.value}")
                cameraActivity.changeFragment((viewModel.step.value ?: -1) + 1)
                viewModel.clearResult()
            } else {
                showNetworkErrorDialog()
            }
        }
    }

    private fun clickCloseBtn() {
        binding.btnCancel?.setOnClickListener {
            showStopCameraDialog()
        }
    }

    private fun clickCheckBtn() {
        binding.btnCheck?.setOnClickListener {
            // ‚úÖ step 2 ÌïòÌåêÏù∏ Í≤ΩÏö∞ OCR Ìò∏Ï∂ú
            if (viewModel.step.value == 2) {
                viewModel.backUri.value?.let { uri ->
                    try {
                        val bitmap = uriToBitmap(requireContext(), uri)
                        viewModel.callOcrFromBitmap(requireContext(), bitmap)
                        Log.d(TAG, "üì∏ OCR called from ResultFragment - step 2")
                    } catch (e: Exception) {
                        Log.e(TAG, "‚ùå OCR Ïò§Î•ò: ${e.message}")
                    }
                }
            }
            viewModel.postPhoto()
        }
    }

    private fun clickRePhotoBtn() {
        binding.btnBack?.setOnClickListener {
            cameraActivity.changeFragment((viewModel.step.value ?: -1))
        }
    }

    private fun initImage(url: Uri?) {
        // Î°úÎî© Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
        loadingImage()
        binding.ivProduct?.let {
            Log.d(TAG, "CameraFragment uri: $it")
            Glide.with(it)
                .load(url)
                .into(object : CustomTarget<Drawable>() {
                    override fun onResourceReady(
                        resource: Drawable,
                        transition: Transition<in Drawable>?,
                    ) {
                        binding.ivProduct?.setImageDrawable(resource)
                        binding.ivProduct?.visibility = View.VISIBLE
                        binding.ivLoading?.visibility = View.GONE
                    }

                    override fun onLoadCleared(placeholder: Drawable?) {}
                })
        }
    }

    private fun uri(url: Uri?): Uri? {
        var url1 = url
        if (viewModel.step.value == 1) {
            url1 = viewModel.frontUri.value
        } else if (viewModel.step.value == 2) {
            url1 = viewModel.backUri.value
        } else if (viewModel.step.value == 3) {
            url1 = viewModel.leftUri.value
        } else if (viewModel.step.value == 4) {
            url1 = viewModel.rightUri.value
        } else if (viewModel.step.value == 5) {
            url1 = viewModel.screenUri.value
        } else if (viewModel.step.value == 6) {
            url1 = viewModel.keypadUri.value
        }
        return url1
    }

    private fun loadingImage() {
        binding.ivLoading?.let {
            Glide.with(this)
                .asGif()
                .load(R.drawable.skeleton_ui) // üîÅ Î°úÎî©Ïö© GIF Î¶¨ÏÜåÏä§
                .into(it)
        }
    }

    //ocr
    private fun uriToBitmap(context: Context, uri: Uri): Bitmap {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            val source = ImageDecoder.createSource(context.contentResolver, uri)
            ImageDecoder.decodeBitmap(source)
        } else {
            MediaStore.Images.Media.getBitmap(context.contentResolver, uri)
        }
    }


    private fun showStopCameraDialog() {
        if (stopCameraDialog?.isShowing == true) return
        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÏÉùÏÑ±
        stopCameraDialog = Dialog(requireContext())
        stopCameraDialog?.requestWindowFeature(Window.FEATURE_NO_TITLE)
        stopCameraDialog?.setContentView(R.layout.layout_stop_camera_dialog)

        stopCameraDialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))

        val width = (resources.displayMetrics.widthPixels * 0.5).toInt()
        stopCameraDialog?.window?.setLayout(width, ViewGroup.LayoutParams.WRAP_CONTENT)

        // Ï∑®ÏÜå Î≤ÑÌäº
        val btnCancel = stopCameraDialog?.findViewById<TextView>(R.id.btn_cancel)
        btnCancel?.setOnClickListener {
            stopCameraDialog?.dismiss()
        }

        // Í∑∏ÎßåÌïòÍ∏∞ Î≤ÑÌäº
        val btnConfirm = stopCameraDialog?.findViewById<TextView>(R.id.btn_confirm)
        btnConfirm?.setOnClickListener {
            // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
            stopCameraDialog?.dismiss()
            cameraActivity.moveToBack()
        }

        stopCameraDialog?.show()
    }

    private fun showNetworkErrorDialog() {
        val dialog = Dialog(requireContext())
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)
        dialog.setContentView(R.layout.layout_error_dialog)

        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))

        val width = (resources.displayMetrics.widthPixels * 0.4).toInt()
        dialog.window?.setLayout(width, ViewGroup.LayoutParams.WRAP_CONTENT)

        // ÌôïÏù∏ Î≤ÑÌäº
        val confirmButton = dialog.findViewById<TextView>(R.id.tv_confirm)
        confirmButton.setOnClickListener {
            dialog.dismiss()
        }

        dialog.show()
    }

    companion object {
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            Step1GuideFragment().apply {
                arguments = Bundle().apply {
                    putString(ARG_PARAM1, param1)
                    putString(ARG_PARAM2, param2)
                }
            }
    }

    override fun onResume() {
        super.onResume()
        cameraActivity?.requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE
    }

    override fun onAttach(context: Context) {
        super.onAttach(context)
        cameraActivity = context as CameraActivity
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        arguments?.let {
            param1 = it.getString(ARG_PARAM1)
            param2 = it.getString(ARG_PARAM2)
        }
    }


}
