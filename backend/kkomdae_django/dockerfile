# Python 3.11-slim 이미지를 베이스 이미지로 사용 (최신 Python 버전)
FROM python:3.11-slim

# 환경변수 설정
# - PYTHONDONTWRITEBYTECODE: 파이썬이 .pyc 파일을 생성하지 않도록 함
# - PYTHONUNBUFFERED: 로그를 버퍼링하지 않고 바로 출력 (실시간 로그 확인 용이)
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# 작업 디렉토리 설정 (애플리케이션 코드가 위치할 경로)
WORKDIR /app

# 시스템 의존성 설치
# libpq-dev: PostgreSQL과 연동할 때 필요한 라이브러리 (docker-compose.yml의 postgres 사용 참고)
# gcc, python3-dev: C 확장 모듈 빌드에 필요
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# requirements.txt 파일만 먼저 복사하여 의존성 설치 단계의 캐싱 효과를 노림
COPY ./requirements.txt /app/

# pip 업그레이드 및 Python 의존성 설치 (requirements.txt 내에 Django, gunicorn 등 최신 버전 명시)
RUN pip install --upgrade pip && pip install -r requirements.txt

# 애플리케이션 전체 소스 코드를 컨테이너에 복사
COPY ./ /app/

# test 진행
RUN python manage.py test

# 컨테이너에서 사용할 포트 지정 (보통 gunicorn은 8000 포트를 사용)
EXPOSE 8000

# 컨테이너 시작 시 실행할 명령어
# 실제 서비스에서는 데이터베이스 마이그레이션이나 기타 사전 작업을 별도의 엔트리포인트 스크립트로 분리할 수 있습니다.
# gunicorn으로 WSGI 애플리케이션을 실행.
CMD ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "4", "--timeout", "60"]
